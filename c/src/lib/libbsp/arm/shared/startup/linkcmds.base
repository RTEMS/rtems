/**
 * @file
 *
 * @ingroup bsp_linker
 *
 * @brief Linker command base file.
 */

/*
 * Copyright (c) 2008-2013 embedded brains GmbH.  All rights reserved.
 *
 *  embedded brains GmbH
 *  Obere Lagerstr. 30
 *  82178 Puchheim
 *  Germany
 *  <rtems@embedded-brains.de>
 *
 * The license and distribution terms for this file may be
 * found in the file LICENSE in this distribution or at
 * http://www.rtems.com/license/LICENSE.
 */

OUTPUT_FORMAT ("elf32-littlearm", "elf32-bigarm", "elf32-littlearm")

OUTPUT_ARCH (arm)

ENTRY (_start)

/*
 * Global symbols that may be defined externally
 */

bsp_vector_table_size = DEFINED (bsp_vector_table_size) ? bsp_vector_table_size : 64;

bsp_section_xbarrier_align = DEFINED (bsp_section_xbarrier_align) ? bsp_section_xbarrier_align : 1;
bsp_section_robarrier_align = DEFINED (bsp_section_robarrier_align) ? bsp_section_robarrier_align : 1;
bsp_section_rwbarrier_align = DEFINED (bsp_section_rwbarrier_align) ? bsp_section_rwbarrier_align : 1;

bsp_stack_align = DEFINED (bsp_stack_align) ? bsp_stack_align : 8;

bsp_stack_abt_size = DEFINED (bsp_stack_abt_size) ? bsp_stack_abt_size : 0;
bsp_stack_abt_size = ALIGN (bsp_stack_abt_size, bsp_stack_align);

bsp_stack_fiq_size = DEFINED (bsp_stack_fiq_size) ? bsp_stack_fiq_size : 0;
bsp_stack_fiq_size = ALIGN (bsp_stack_fiq_size, bsp_stack_align);

bsp_stack_irq_size = DEFINED (bsp_stack_irq_size) ? bsp_stack_irq_size : 0;
bsp_stack_irq_size = ALIGN (bsp_stack_irq_size, bsp_stack_align);

bsp_stack_svc_size = DEFINED (bsp_stack_svc_size) ? bsp_stack_svc_size : 0;
bsp_stack_svc_size = ALIGN (bsp_stack_svc_size, bsp_stack_align);

bsp_stack_und_size = DEFINED (bsp_stack_und_size) ? bsp_stack_und_size : 0;
bsp_stack_und_size = ALIGN (bsp_stack_und_size, bsp_stack_align);

bsp_stack_main_size = DEFINED (bsp_stack_main_size) ? bsp_stack_main_size : 0;
bsp_stack_main_size = ALIGN (bsp_stack_main_size, bsp_stack_align);

bsp_stack_all_size = bsp_stack_abt_size + bsp_stack_fiq_size + bsp_stack_irq_size + bsp_stack_svc_size + bsp_stack_und_size + bsp_stack_main_size;

bsp_processor_count = DEFINED (bsp_processor_count) ? bsp_processor_count : 1;

MEMORY {
	UNEXPECTED_SECTIONS : ORIGIN = 0xffffffff, LENGTH = 0
}

SECTIONS {
	.start : {
		bsp_section_start_begin = .;
		KEEP (*(.bsp_start_text))
		KEEP (*(.bsp_start_data))
		bsp_section_start_end = .;
	} > REGION_START AT > REGION_START
	bsp_section_start_size = bsp_section_start_end - bsp_section_start_begin;

	.xbarrier : {
		. = ALIGN (bsp_section_xbarrier_align);
	} > REGION_VECTOR

	.text : ALIGN(32) {
		bsp_section_text_begin = .;

		/* .text */
		*(.text.unlikely .text.*_unlikely)
		*(.text .stub .text.* .gnu.linkonce.t.*)
		/* .gnu.warning sections are handled specially by elf32.em.  */
		*(.gnu.warning)
		*(.glue_7t) *(.glue_7) *(.vfp11_veneer) *(.v4_bx)

		/* .init */
		KEEP (*(.init))

		/* .fini */
		KEEP (*(.fini))

		bsp_section_text_end = .;
	} > REGION_TEXT AT > REGION_TEXT_LOAD
	bsp_section_text_size = bsp_section_text_end - bsp_section_text_begin;
	bsp_section_text_load_begin = LOADADDR (.text);
	bsp_section_text_load_end = bsp_section_text_load_begin + bsp_section_text_size;

	.robarrier : {
		. = ALIGN (bsp_section_robarrier_align);
	} > REGION_RODATA

	.rodata : ALIGN(32) {
		bsp_section_rodata_begin = .;

		/* .rodata */
		*(.rodata .rodata.* .gnu.linkonce.r.*)

		/* .rodata1 */
		*(.rodata1)

		/* .ARM.extab */
		*(.ARM.extab* .gnu.linkonce.armextab.*)

		/* .eh_frame */
		KEEP (*(.eh_frame))

		/* .gcc_except_table */
		*(.gcc_except_table .gcc_except_table.*)

		/* .tdata */
		*(.tdata .tdata.* .gnu.linkonce.td.*)

		/* .tbss */
		*(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon)

		/* .preinit_array */
		PROVIDE_HIDDEN (__preinit_array_start = .);
		KEEP (*(.preinit_array))
		PROVIDE_HIDDEN (__preinit_array_end = .);

		/* .init_array */
		PROVIDE_HIDDEN (__init_array_start = .);
		KEEP (*(SORT(.init_array.*)))
		KEEP (*(.init_array))
		PROVIDE_HIDDEN (__init_array_end = .);

		/* .fini_array */
		PROVIDE_HIDDEN (__fini_array_start = .);
		KEEP (*(.fini_array))
		KEEP (*(SORT(.fini_array.*)))
		PROVIDE_HIDDEN (__fini_array_end = .);

		/* .ctors */
		/* gcc uses crtbegin.o to find the start of
		   the constructors, so we make sure it is
		   first.  Because this is a wildcard, it
		   doesn't matter if the user does not
		   actually link against crtbegin.o; the
		   linker won't look for a file to match a
		   wildcard.  The wildcard also means that it
		   doesn't matter which directory crtbegin.o
		   is in.  */
		KEEP (*crtbegin.o(.ctors))
		KEEP (*crtbegin?.o(.ctors))
		/* We don't want to include the .ctor section from
		   the crtend.o file until after the sorted ctors.
		   The .ctor section from the crtend file contains the
		   end of ctors marker and it must be last */
		KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
		KEEP (*(SORT(.ctors.*)))
		KEEP (*(.ctors))

		/* .dtors */
		KEEP (*crtbegin.o(.dtors))
		KEEP (*crtbegin?.o(.dtors))
		KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
		KEEP (*(SORT(.dtors.*)))
		KEEP (*(.dtors))

		/* .data.rel.ro */
		*(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*)
		*(.data.rel.ro* .gnu.linkonce.d.rel.ro.*)

		/* .jcr */
		KEEP (*(.jcr))

		/* .interp */
		*(.interp)

		/* .note.gnu.build-id */
		*(.note.gnu.build-id)

		/* .hash */
		*(.hash)

		/* .gnu.hash */
		*(.gnu.hash)

		/* .dynsym */
		*(.dynsym)

		/* .dynstr */
		*(.dynstr)

		/* .gnu.version */
		*(.gnu.version)

		/* .gnu.version_d */
		*(.gnu.version_d)

		/* .gnu.version_r */
		*(.gnu.version_r)

		/* .rel.dyn */
		*(.rel.init)
		*(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
		*(.rel.fini)
		*(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
		*(.rel.data.rel.ro* .rel.gnu.linkonce.d.rel.ro.*)
		*(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
		*(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
		*(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
		*(.rel.ctors)
		*(.rel.dtors)
		*(.rel.got)
		*(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
		PROVIDE_HIDDEN (__rel_iplt_start = .);
		*(.rel.iplt)
		PROVIDE_HIDDEN (__rel_iplt_end = .);
		PROVIDE_HIDDEN (__rela_iplt_start = .);
		PROVIDE_HIDDEN (__rela_iplt_end = .);

		/* .rela.dyn */
		*(.rela.init)
		*(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
		*(.rela.fini)
		*(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
		*(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
		*(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
		*(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
		*(.rela.ctors)
		*(.rela.dtors)
		*(.rela.got)
		*(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
		PROVIDE_HIDDEN (__rel_iplt_start = .);
		PROVIDE_HIDDEN (__rel_iplt_end = .);
		PROVIDE_HIDDEN (__rela_iplt_start = .);
		*(.rela.iplt)
		PROVIDE_HIDDEN (__rela_iplt_end = .);

		/* .rel.plt */
		*(.rel.plt)

		/* .rela.plt */
		*(.rela.plt)

		/* .plt */
		*(.plt)

		/* .iplt */
		*(.iplt)

		/* .dynamic */
		*(.dynamic)

		/* .got */
		*(.got.plt) *(.igot.plt) *(.got) *(.igot)

		/* Special FreeBSD linker set sections */
		__start_set_sysctl_set = .;
		*(set_sysctl_*);
		__stop_set_sysctl_set = .;
		*(set_domain_*);
		*(set_pseudo_*);
		_bsd__start_set_modmetadata_set = .;
		*(_bsd_set_modmetadata_set);
		_bsd__stop_set_modmetadata_set = .;
		_bsd__start_set_sysctl_set = .;
		*(_bsd_set_sysctl_set);
		_bsd__stop_set_sysctl_set = .;

		bsp_section_rodata_end = .;
	} > REGION_RODATA AT > REGION_RODATA_LOAD
	bsp_section_rodata_size = bsp_section_rodata_end - bsp_section_rodata_begin;
	bsp_section_rodata_load_begin = LOADADDR (.rodata);
	bsp_section_rodata_load_end = bsp_section_rodata_load_begin + bsp_section_rodata_size;

	.ARM.exidx : ALIGN(32) {
		bsp_section_armexidx_begin = .;

		/* .ARM.exidx */
		__exidx_start = .;
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
		__exidx_end = .;

		bsp_section_armexidx_end = .;
	} > REGION_RODATA AT > REGION_RODATA_LOAD
	bsp_section_armexidx_size = bsp_section_armexidx_end - bsp_section_armexidx_begin;
	bsp_section_armexidx_load_begin = LOADADDR (.ARM.exidx);
	bsp_section_armexidx_load_end = bsp_section_armexidx_load_begin + bsp_section_armexidx_size;

	.rwbarrier : {
		. = ALIGN (bsp_section_rwbarrier_align);
	} > REGION_DATA

	.vector : {
		bsp_section_vector_begin = .;

		. = . + DEFINED (bsp_vector_table_in_start_section) ? 0 : bsp_vector_table_size;

		. = ALIGN (bsp_stack_align);

		bsp_stack_abt_begin = .;
		. = . + bsp_stack_abt_size;
		bsp_stack_abt_end = .;

		bsp_stack_fiq_begin = .;
		. = . + bsp_stack_fiq_size;
		bsp_stack_fiq_end = .;

		bsp_stack_irq_begin = .;
		. = . + bsp_stack_irq_size;
		bsp_stack_irq_end = .;

		bsp_stack_svc_begin = .;
		. = . + bsp_stack_svc_size;
		bsp_stack_svc_end = .;

		bsp_stack_und_begin = .;
		. = . + bsp_stack_und_size;
		bsp_stack_und_end = .;

		bsp_stack_main_begin = .;
		. = . + bsp_stack_main_size;
		bsp_stack_main_end = .;

		bsp_stack_secondary_processors_begin = .;
		. = . + (bsp_processor_count - 1) * bsp_stack_all_size;
		bsp_stack_secondary_processors_end = .;

		*(.bsp_vector)

		bsp_section_vector_end = .;
	} > REGION_VECTOR AT > REGION_VECTOR
	bsp_section_vector_size = bsp_section_vector_end - bsp_section_vector_begin;
	bsp_vector_table_begin = DEFINED (bsp_vector_table_in_start_section) ? bsp_section_start_begin : bsp_section_vector_begin;
	bsp_vector_table_end = bsp_vector_table_begin + bsp_vector_table_size;

	.fast_text : {
		bsp_section_fast_text_begin = .;
		*(.bsp_fast_text)
		bsp_section_fast_text_end = .;
	} > REGION_FAST_TEXT AT > REGION_FAST_TEXT_LOAD
	bsp_section_fast_text_size = bsp_section_fast_text_end - bsp_section_fast_text_begin;
	bsp_section_fast_text_load_begin = LOADADDR (.fast_text);
	bsp_section_fast_text_load_end = bsp_section_fast_text_load_begin + bsp_section_fast_text_size;

	.fast_data : ALIGN(32) {
		bsp_section_fast_data_begin = .;
		*(.bsp_fast_data)
		bsp_section_fast_data_end = .;
	} > REGION_FAST_DATA AT > REGION_FAST_DATA_LOAD
	bsp_section_fast_data_size = bsp_section_fast_data_end - bsp_section_fast_data_begin;
	bsp_section_fast_data_load_begin = LOADADDR (.fast_data);
	bsp_section_fast_data_load_end = bsp_section_fast_data_load_begin + bsp_section_fast_data_size;

	.data : ALIGN(32) {
		bsp_section_data_begin = .;

		/* .data */
		*(.data .data.* .gnu.linkonce.d.*)
		SORT(CONSTRUCTORS)

		/* .data1 */
		*(.data1)

		/* Special FreeBSD linker set sections */
		_bsd__start_set_sysinit_set = .;
		*(_bsd_set_sysinit_set);
		_bsd__stop_set_sysinit_set = .;

		bsp_section_data_end = .;
	} > REGION_DATA AT > REGION_DATA_LOAD
	bsp_section_data_size = bsp_section_data_end - bsp_section_data_begin;
	bsp_section_data_load_begin = LOADADDR (.data);
	bsp_section_data_load_end = bsp_section_data_load_begin + bsp_section_data_size;

	.bss : {
		bsp_section_bss_begin = .;

		/* .bss */
		*(.dynbss)
		*(.bss .bss.* .gnu.linkonce.b.*)
		*(COMMON)

		bsp_section_bss_end = .;
	} > REGION_BSS AT > REGION_BSS
	bsp_section_bss_size = bsp_section_bss_end - bsp_section_bss_begin;

	.work : {
		/*
		 * The work section will occupy the remaining REGION_WORK region and
		 * contains the RTEMS work space and heap.
		 */
		bsp_section_work_begin = .;
		. += ORIGIN (REGION_WORK) + LENGTH (REGION_WORK) - ABSOLUTE (.);
		bsp_section_work_end = .;
	} > REGION_WORK AT > REGION_WORK
	bsp_section_work_size = bsp_section_work_end - bsp_section_work_begin;

	.stack : {
		/*
		 * The stack section will occupy the remaining REGION_STACK region and may
		 * contain the task stacks.  Depending on the region distribution this
		 * section may be of zero size.
		 */
		bsp_section_stack_begin = .;
		. += ORIGIN (REGION_STACK) + LENGTH (REGION_STACK) - ABSOLUTE (.);
		bsp_section_stack_end = .;
	} > REGION_STACK AT > REGION_STACK
	bsp_section_stack_size = bsp_section_stack_end - bsp_section_stack_begin;

	/* FIXME */
	RamBase = ORIGIN (REGION_WORK);
	RamSize = LENGTH (REGION_WORK);
	WorkAreaBase = bsp_section_work_begin;
	HeapSize = 0;

	/* Stabs debugging sections.  */
	.stab          0 : { *(.stab) }
	.stabstr       0 : { *(.stabstr) }
	.stab.excl     0 : { *(.stab.excl) }
	.stab.exclstr  0 : { *(.stab.exclstr) }
	.stab.index    0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment       0 : { *(.comment) }
	/* DWARF debug sections.
	   Symbols in the DWARF debugging sections are relative to the beginning
	   of the section so we begin them at 0.  */
	/* DWARF 1 */
	.debug          0 : { *(.debug) }
	.line           0 : { *(.line) }
	/* GNU DWARF 1 extensions */
	.debug_srcinfo  0 : { *(.debug_srcinfo) }
	.debug_sfnames  0 : { *(.debug_sfnames) }
	/* DWARF 1.1 and DWARF 2 */
	.debug_aranges  0 : { *(.debug_aranges) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	/* DWARF 2 */
	.debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
	.debug_abbrev   0 : { *(.debug_abbrev) }
	.debug_line     0 : { *(.debug_line) }
	.debug_frame    0 : { *(.debug_frame) }
	.debug_str      0 : { *(.debug_str) }
	.debug_loc      0 : { *(.debug_loc) }
	.debug_macinfo  0 : { *(.debug_macinfo) }
	/* SGI/MIPS DWARF 2 extensions */
	.debug_weaknames 0 : { *(.debug_weaknames) }
	.debug_funcnames 0 : { *(.debug_funcnames) }
	.debug_typenames 0 : { *(.debug_typenames) }
	.debug_varnames  0 : { *(.debug_varnames) }
	/* DWARF 3 */
	.debug_pubtypes 0 : { *(.debug_pubtypes) }
	.debug_ranges   0 : { *(.debug_ranges) }
	/* DWARF extension */
	.debug_macro    0 : { *(.debug_macro) }
	.ARM.attributes 0 : { KEEP (*(.ARM.attributes)) KEEP (*(.gnu.attributes)) }
	.note.gnu.arm.ident 0 : { KEEP (*(.note.gnu.arm.ident)) }
	/DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }

	/*
	 * This is a RTEMS specific section to catch all unexpected input
	 * sections.  In case you get an error like
	 *   "section `.unexpected_sections' will not fit in region
	 *   `UNEXPECTED_SECTIONS'"
	 * you have to figure out the offending input section and add it to the
	 * appropriate output section definition above.
	 */
	.unexpected_sections : { *(*) } > UNEXPECTED_SECTIONS
}
